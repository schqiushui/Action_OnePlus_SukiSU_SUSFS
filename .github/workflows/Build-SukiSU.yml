name: Build OnePlus Kernel # 构建一加内核

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "Branch to build (要构建的分支)"
        required: true
        default: 'sm8750'
      FEIL:
        description: "Configuration file (配置文件)"
        required: true
        default: 'oneplus_13_v'
      CPUD:
        description: "Processor code name (处理器代号)"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "Kernel Android version (内核 Android 版本)"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "Kernel version (内核版本)"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "Kernel name modification (内核名称修改)"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      kernelsu_variant:
        description: "Select KernelSU variant (选择 KernelSU 变体)"
        required: true
        type: choice
        options:
          - Kernel
          - SukiSU
        default: SukiSU
      kernelsu_version:
        description: "Select KernelSU version (选择 KernelSU 版本)"
        required: true
        type: choice
        options:
          - without ksu
          - dev
          - stable
        default: dev
      SUSFS_ENABLED:
        description: "Enable SUSFS (启用 SUSFS)"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable
      VFS_patch_ENABLED:
        description: "Enable VFS patch (add new hooks)? (启用 VFS 补丁（添加新钩子）？)"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space # 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git & Install dependencies # 配置 Git & 安装依赖
        run: |
          git config --global user.name "schqiushui"
          git config --global user.email "orochi9999@gmail.com"
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl

      - name: Install repo tool # 安装 repo 工具
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync # 初始化 repo 和同步
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/schqiushui/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion

      - name: KernelSU & SukiSU setup # 配置 KernelSU & SukiSU
        if: ${{ github.event.inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-${{ github.event.inputs.kernelsu_version }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12500/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply SUSFS & Hide patches # 应用 SUSFS & 隐藏补丁
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && github.event.inputs.SUSFS_ENABLED == 'enable' }}
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          git clone https://github.com/schqiushui/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]]; then
            cd susfs4ksu && git reset --hard HEAD~1 && cd ..
          fi
          cd kernel_platform

          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          echo "正在给内核打susfs补丁"
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          echo "完成"

          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply New Hooks patches # 应用新的钩子补丁
        if: ${{ github.event.inputs.VFS_patch_ENABLED == 'enable' }}
        run: |
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/hooks/new_hooks.patch ./
          echo "正在打vfs补丁"
          patch -p1 -F 3 < new_hooks.patch
          echo "完成"

      - name: Configure kernel # 配置内核
        run: |
          cd kernel_workspace/kernel_platform
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=${{ github.event.inputs.VFS_patch_ENABLED == 'enable' && 'n' || 'y' }}" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=${{ github.event.inputs.VFS_patch_ENABLED == 'enable' && 'y' || 'n' }}" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Set kernel name # 设置内核名称
        run: |
          cd kernel_workspace/kernel_platform
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" || "${{ github.event.inputs.CPU }}" == "sm8750" ]]; then
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi
          sed -i '$s|echo "\$res"|echo "\${{ github.event.inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion

      - name: Build kernel # 构建内核
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" ]]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} gki --action_env=KSU_VERSION
          elif [[ "${{ github.event.inputs.CPU }}" == "sm8750" ]]; then
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} perf --action_env=KSU_VERSION
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} gki
          fi

      - name: Make AnyKernel3 # 制作 AnyKernel3
        run: |
          git clone https://github.com/schqiushui/AnyKernel3-KernelSU-Next.git --depth=1 && rm -rf ./AnyKernel3-KernelSU-Next/.git
          DIR1="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
          DIR2="./kernel_workspace/kernel_platform/common/out/arch/arm64/boot/"
          DIR3="./kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/"
          image_path=$(find "$DIR1" "$DIR2" "$DIR3" -name "Image" | head -n 1)
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$DIR1" && cp "$image_path" "$DIR1"Image
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi

      - name: Apply patch_linux and replace Image # 应用 patch_linux 并替换 Image
        run: |
          ANYKERNEL_DIR="./AnyKernel3-KernelSU-Next/"
          IMAGE_DIR="./kernel_workspace/kernel"

          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          cp oImage -t $ANYKERNEL_DIR -t $IMAGE_DIR Image

      - name: Get current date # 获取当前时间
        id: formatted_date
        run: echo "formatted=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 # 上传 AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}_$(date +'%Y-%m-%d_%H-%M-%S')
          path: ./AnyKernel3-KernelSU-Next/*

      - name: Upload Image # 上传 Image
        uses: actions/upload-artifact@v4
        with:
          name: Image_KernelSU_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}_$(date +'%Y-%m-%d_%H-%M-%S')
          path: kernel_workspace/kernel
